import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.parser.CCJSqlParserUtil;
import net.sf.jsqlparser.statement.Statement;
import org.evomaster.client.java.controller.api.dto.database.schema.DbSchemaDto;
import org.evomaster.client.java.sql.SchemaExtractor;
import org.evomaster.client.java.sql.SqlScriptRunner;
import org.evomaster.solver.smtlib.*;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.testcontainers.shaded.com.google.common.collect.ImmutableList;

import org.junit.jupiter.api.Test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.assertEquals;


public class SmtLibGeneratorTest {

    private static SmtLibGenerator generator;
    private static Connection connection;

    @BeforeAll
    static void setup() throws Exception {

        connection = DriverManager.getConnection("jdbc:h2:mem:constraint_test", "sa", "");
        SqlScriptRunner.execCommand(connection, "CREATE TABLE users(id bigint generated by default as identity primary key, name varchar(255), age int, points int);\n");
        DbSchemaDto schemaDto = SchemaExtractor.extract(connection);

        generator = new SmtLibGenerator(schemaDto);
    }

    @AfterAll
    static void tearDown() throws SQLException {
        connection.close();
    }

    /**
     * Test the generation of SMT from a simple select statement and a database schema
     * @throws JSQLParserException if the statement is not valid
     */
    @Test
    public void selectFromUsers() throws JSQLParserException {
        Statement selectStatement = CCJSqlParserUtil.parse("SELECT * FROM Users;");
        SMTLib response = generator.generateSMT(selectStatement);

        SMTLib expected = new SMTLib();
        expected.addNode(new DeclareDatatype("UsersRow", ImmutableList.of(
                new DeclareConst("ID", "Int"),
                new DeclareConst("NAME", "String"),
                new DeclareConst("AGE", "Int"),
                new DeclareConst("POINTS", "Int")
        )));
        expected.addNode(new DeclareConst("users1", "UsersRow"));
        expected.addNode(new DeclareConst("users2", "UsersRow"));
        expected.addNode(new CheckSat());
        expected.addNode(new GetValue("users1"));
        expected.addNode(new GetValue("users2"));

        assertEquals(expected, response);
    }
}