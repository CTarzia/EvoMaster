package org.evomaster.client.java.controller.problem.rpc.schema;

import org.evomaster.client.java.controller.api.dto.problem.rpc.RPCActionDto;
import org.evomaster.client.java.controller.problem.rpc.CodeJavaGenerator;
import org.evomaster.client.java.controller.problem.rpc.schema.params.NamedTypedValue;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * endpoint dto for RPC service
 */
public final class EndpointSchema {
    /**
     * name of the endpoint
     */
    private final String name;

    /**
     * name of the interface
     */
    private final String interfaceName;

    /**
     * name of type of the client
     */
    private final String clientTypeName;

    /**
     * request params of the endpoint
     */
    private final List<NamedTypedValue> requestParams;

    /**
     * response of the endpoint
     */
    private final NamedTypedValue response;

    /**
     * a list of exceptions which could throw from this endpoint
     */
    private final List<NamedTypedValue> exceptions;

    public EndpointSchema(String name, String interfaceName, String clientTypeName, List<NamedTypedValue> requestParams, NamedTypedValue response, List<NamedTypedValue> exceptions) {
        this.name = name;
        this.interfaceName = interfaceName;
        this.clientTypeName = clientTypeName;
        this.requestParams = requestParams;
        this.response = response;
        this.exceptions = exceptions;
    }

    public String getName() {
        return name;
    }

    public List<NamedTypedValue> getRequestParams() {
        return requestParams;
    }

    public NamedTypedValue getResponse() {
        return response;
    }

    public List<NamedTypedValue> getExceptions() {
        return exceptions;
    }

    public RPCActionDto getDto(){
        RPCActionDto dto = new RPCActionDto();
        dto.actionName = name;
        dto.interfaceId = interfaceName;
        dto.clientInfo = clientTypeName;
        dto.requestParams = requestParams.stream().map(NamedTypedValue::getDto).collect(Collectors.toList());
        if (response != null)
            dto.responseParam = response.getDto();
        return dto;
    }

    /**
     *
     * @param dto is a dto of rpc call which contains value info
     * @return if this endpoint matches the specified dto
     */
    public boolean sameEndpoint(RPCActionDto dto){
        return dto.actionName.equals(name)
                // only check input parameters
                // && (getResponse() == null || getResponse().sameParam(dto.responseParam))
                && getRequestParams().size() == dto.requestParams.size()
                && IntStream.range(0, getRequestParams().size()).allMatch(i-> getRequestParams().get(i).sameParam(dto.requestParams.get(i)));
    }

    /**
     *
     * @return a copy of this endpoint which contains its structure but not values
     */
    public EndpointSchema copyStructure(){
        return new EndpointSchema(
                name, interfaceName, clientTypeName,
                requestParams == null? null: requestParams.stream().map(NamedTypedValue::copyStructure).collect(Collectors.toList()),
                response == null? null: response.copyStructure(), exceptions == null? null: exceptions.stream().map(NamedTypedValue::copyStructure).collect(Collectors.toList()));
    }

    /**
     * set value of endpoint based on dto
     * @param dto contains value info the endpoint
     *            note that the dto is typically generated by core side, ie, search
     */
    public void setValue(RPCActionDto dto){
        if (dto.requestParams != null ){
            IntStream.range(0, dto.requestParams.size()).forEach(s-> requestParams.get(s).setValueBasedOnDto(dto.requestParams.get(s)));
        }
        // might be not useful
        if (dto.responseParam != null)
            response.setValueBasedOnDto(dto.responseParam);
    }

    /**
     * process to generate java code to invoke this request
     * @param responseVarName specifies a variable name representing a response of this endpoint
     * @return code to send the request and set the response if exists
     */
    public List<String> newInvocationWithJava(String responseVarName){
        List<String> javaCode = new ArrayList<>();
        if (response != null){
            javaCode.add(CodeJavaGenerator.oneLineInstance(true, true, response.getType().getFullTypeName(), responseVarName, null));
        }
        javaCode.add("{");
        int indent = 1;
        for (NamedTypedValue param: getRequestParams()){
            javaCode.addAll(param.newInstanceWithJava(indent));
        }
        String paramVars = requestParams.stream().map(NamedTypedValue::getName).collect(Collectors.joining(","));
        String client = CodeJavaGenerator.castToType(clientTypeName, CodeJavaGenerator.getGetClientMethod(interfaceName));

        CodeJavaGenerator.addCode(
                javaCode,
                CodeJavaGenerator.setInstance(response!= null,
                        responseVarName,
                        CodeJavaGenerator.methodInvocation(client, getName(), paramVars)),
                indent);

        javaCode.add("}");
        return javaCode;
    }
}
