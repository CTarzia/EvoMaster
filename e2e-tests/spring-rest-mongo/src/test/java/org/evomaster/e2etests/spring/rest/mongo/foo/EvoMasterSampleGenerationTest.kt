package org.foo.spring.rest.mongo


import  org.junit.jupiter.api.AfterAll
import  org.junit.jupiter.api.BeforeAll
import  org.junit.jupiter.api.BeforeEach
import  org.junit.jupiter.api.Test
import  org.junit.jupiter.api.Timeout
import  org.junit.jupiter.api.Assertions.*
import  java.util.List
import  org.evomaster.client.java.controller.api.EMTestUtils.*
import  org.evomaster.client.java.controller.SutHandler
import  io.restassured.RestAssured
import  io.restassured.RestAssured.given
import  io.restassured.response.ValidatableResponse
import  org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto
import  org.hamcrest.Matchers.*
import  io.restassured.config.JsonConfig
import  io.restassured.path.json.config.JsonPathConfig
import  io.restassured.config.RedirectConfig.redirectConfig
import  org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*
import  org.evomaster.client.java.controller.contentMatchers.StringMatcher.*
import  org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*
import  org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler
import  org.evomaster.client.java.controller.expect.ExpectationHandler
import  io.restassured.path.json.JsonPath
import  java.util.Arrays




/**
 * This file was automatically generated by EvoMaster on 2023-06-29T13:40:21.894829-03:00\[America/Argentina/Buenos_Aires\]
 *
 * The generated test suite contains 3 tests
 *
 * Covered targets: 29
 *
 * Used time: 0h 0m 10s
 *
 * Needed budget for current results: 100%
 *
 *
 */
internal class MongoEMGeneration {


    companion object {
        private val controller : SutHandler = com.foo.spring.rest.mongo.MongoPersonsWithoutPostAppController()
        private lateinit var baseUrlOfSut: String
        /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
         * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
         */
        private val ems = false
        /**
         * sco - supported code oracle - checking that the response status code is among those supported according to the schema
         */
        private val sco = false


        @BeforeAll
        @JvmStatic
        fun initClass() {
            controller.setupForGeneratedTest()
            baseUrlOfSut = controller.startSut()
            assertNotNull(baseUrlOfSut)
            RestAssured.enableLoggingOfRequestAndResponseIfValidationFails()
            RestAssured.useRelaxedHTTPSValidation()
            RestAssured.urlEncodingEnabled = false
            RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false))
        }


        @AfterAll
        @JvmStatic
        fun tearDown() {
            controller.stopSut()
        }
    }


    @BeforeEach
    fun initTest() {
        controller.resetStateOfSUT()
    }




    @Test @Timeout(60)
    fun test_0()  {
        val expectationHandler: ExpectationHandler = expectationHandler()

        val res_0: ValidatableResponse = given().accept("*/*")
            .get("${baseUrlOfSut}/v2/api-docs")
            .then()
            .statusCode(200)
            .assertThat()
            .contentType("application/json")
            .body("'swagger'", containsString("2.0"))
            .body("'info'.'description'", containsString("Some description"))
            .body("'info'.'version'", containsString("1.0"))
            .body("'info'.'title'", containsString("API"))
            .body("'basePath'", containsString("/"))
            .body("'tags'.size()", equalTo(1))
            .body("'tags'[0].'name'", containsString("person-without-post-controller"))
            .body("'tags'[0].'description'", containsString("Person Without Post Controller"))
            .body("'paths'.'/persons/list18'.'get'.'tags'.size()", equalTo(1))
            .body("'paths'.'/persons/list18'.'get'.'tags'", hasItems("person-without-post-controller"))
            .body("'paths'.'/persons/list18'.'get'.'summary'", containsString("find18s"))
            .body("'paths'.'/persons/list18'.'get'.'operationId'", containsString("find18sUsingGET"))
            .body("'paths'.'/persons/list18'.'get'.'produces'.size()", equalTo(1))
            .body("'paths'.'/persons/list18'.'get'.'produces'", hasItems("*/*"))
            .body("'paths'.'/persons/list18'.'get'.'responses'.'200'.'description'", containsString("OK"))
            .body("'paths'.'/persons/list18'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
            .body("'paths'.'/persons/list18'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
            .body("'paths'.'/persons/list18'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
            .body("'paths'.'/persons/list18'.'get'.'responsesObject'.'200'.'description'", containsString("OK"))
            .body("'paths'.'/persons/list18'.'get'.'responsesObject'.'401'.'description'", containsString("Unauthorized"))
            .body("'paths'.'/persons/list18'.'get'.'responsesObject'.'403'.'description'", containsString("Forbidden"))
            .body("'paths'.'/persons/list18'.'get'.'responsesObject'.'404'.'description'", containsString("Not Found"))

        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, listOf<Int>().contains(res_0.extract().statusCode()))
    }


    @Test @Timeout(60)
    fun test_1()  {
        val insertions = mongo().insertInto("persons", "person")
            .d("{\"id\":\"IMU_V4ERbZxCSaw\", \"age\":18}")
            .dtos()
        val insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions)

        given().accept("*/*")
            .header("x-EMextraHeader123", "")
            .get("${baseUrlOfSut}/persons/list18")
            .then()
            .statusCode(200)
            .assertThat()
            .body(isEmptyOrNullString())

    }


    @Test @Timeout(60)
    fun test_2()  {
        val expectationHandler: ExpectationHandler = expectationHandler()

        val res_0: ValidatableResponse = given().accept("*/*")
            .header("x-EMextraHeader123", "")
            .get("${baseUrlOfSut}/persons/list18?EMextraParam123=_EM_0_XYZ_")
            .then()
            .statusCode(400)
            .assertThat()
            .body(isEmptyOrNullString())

        expectationHandler.expect(ems)
            .that(sco, listOf<Int>(200, 401, 403, 404).contains(res_0.extract().statusCode()))
    }


}
