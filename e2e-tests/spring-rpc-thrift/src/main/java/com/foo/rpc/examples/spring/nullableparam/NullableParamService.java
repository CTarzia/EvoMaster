/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foo.rpc.examples.spring.nullableparam;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-07")
public class NullableParamService {

  public interface Iface {

    public void handleAnyNullable(NullableDto dto) throws org.apache.thrift.TException;

    public void handleAnyRequired(RequiredDto dto) throws org.apache.thrift.TException;

    public void handleRequiredNullable(NullableDto dto) throws org.apache.thrift.TException;

    public void handleRequiredRequired(RequiredDto dto) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void handleAnyNullable(NullableDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void handleAnyRequired(RequiredDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void handleRequiredNullable(NullableDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void handleRequiredRequired(RequiredDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void handleAnyNullable(NullableDto dto) throws org.apache.thrift.TException
    {
      send_handleAnyNullable(dto);
      recv_handleAnyNullable();
    }

    public void send_handleAnyNullable(NullableDto dto) throws org.apache.thrift.TException
    {
      handleAnyNullable_args args = new handleAnyNullable_args();
      args.setDto(dto);
      sendBase("handleAnyNullable", args);
    }

    public void recv_handleAnyNullable() throws org.apache.thrift.TException
    {
      handleAnyNullable_result result = new handleAnyNullable_result();
      receiveBase(result, "handleAnyNullable");
      return;
    }

    public void handleAnyRequired(RequiredDto dto) throws org.apache.thrift.TException
    {
      send_handleAnyRequired(dto);
      recv_handleAnyRequired();
    }

    public void send_handleAnyRequired(RequiredDto dto) throws org.apache.thrift.TException
    {
      handleAnyRequired_args args = new handleAnyRequired_args();
      args.setDto(dto);
      sendBase("handleAnyRequired", args);
    }

    public void recv_handleAnyRequired() throws org.apache.thrift.TException
    {
      handleAnyRequired_result result = new handleAnyRequired_result();
      receiveBase(result, "handleAnyRequired");
      return;
    }

    public void handleRequiredNullable(NullableDto dto) throws org.apache.thrift.TException
    {
      send_handleRequiredNullable(dto);
      recv_handleRequiredNullable();
    }

    public void send_handleRequiredNullable(NullableDto dto) throws org.apache.thrift.TException
    {
      handleRequiredNullable_args args = new handleRequiredNullable_args();
      args.setDto(dto);
      sendBase("handleRequiredNullable", args);
    }

    public void recv_handleRequiredNullable() throws org.apache.thrift.TException
    {
      handleRequiredNullable_result result = new handleRequiredNullable_result();
      receiveBase(result, "handleRequiredNullable");
      return;
    }

    public void handleRequiredRequired(RequiredDto dto) throws org.apache.thrift.TException
    {
      send_handleRequiredRequired(dto);
      recv_handleRequiredRequired();
    }

    public void send_handleRequiredRequired(RequiredDto dto) throws org.apache.thrift.TException
    {
      handleRequiredRequired_args args = new handleRequiredRequired_args();
      args.setDto(dto);
      sendBase("handleRequiredRequired", args);
    }

    public void recv_handleRequiredRequired() throws org.apache.thrift.TException
    {
      handleRequiredRequired_result result = new handleRequiredRequired_result();
      receiveBase(result, "handleRequiredRequired");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void handleAnyNullable(NullableDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      handleAnyNullable_call method_call = new handleAnyNullable_call(dto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class handleAnyNullable_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private NullableDto dto;
      public handleAnyNullable_call(NullableDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dto = dto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handleAnyNullable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        handleAnyNullable_args args = new handleAnyNullable_args();
        args.setDto(dto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void handleAnyRequired(RequiredDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      handleAnyRequired_call method_call = new handleAnyRequired_call(dto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class handleAnyRequired_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private RequiredDto dto;
      public handleAnyRequired_call(RequiredDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dto = dto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handleAnyRequired", org.apache.thrift.protocol.TMessageType.CALL, 0));
        handleAnyRequired_args args = new handleAnyRequired_args();
        args.setDto(dto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void handleRequiredNullable(NullableDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      handleRequiredNullable_call method_call = new handleRequiredNullable_call(dto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class handleRequiredNullable_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private NullableDto dto;
      public handleRequiredNullable_call(NullableDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dto = dto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handleRequiredNullable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        handleRequiredNullable_args args = new handleRequiredNullable_args();
        args.setDto(dto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void handleRequiredRequired(RequiredDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      handleRequiredRequired_call method_call = new handleRequiredRequired_call(dto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class handleRequiredRequired_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private RequiredDto dto;
      public handleRequiredRequired_call(RequiredDto dto, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dto = dto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("handleRequiredRequired", org.apache.thrift.protocol.TMessageType.CALL, 0));
        handleRequiredRequired_args args = new handleRequiredRequired_args();
        args.setDto(dto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("handleAnyNullable", new handleAnyNullable());
      processMap.put("handleAnyRequired", new handleAnyRequired());
      processMap.put("handleRequiredNullable", new handleRequiredNullable());
      processMap.put("handleRequiredRequired", new handleRequiredRequired());
      return processMap;
    }

    public static class handleAnyNullable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handleAnyNullable_args> {
      public handleAnyNullable() {
        super("handleAnyNullable");
      }

      public handleAnyNullable_args getEmptyArgsInstance() {
        return new handleAnyNullable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public handleAnyNullable_result getResult(I iface, handleAnyNullable_args args) throws org.apache.thrift.TException {
        handleAnyNullable_result result = new handleAnyNullable_result();
        iface.handleAnyNullable(args.dto);
        return result;
      }
    }

    public static class handleAnyRequired<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handleAnyRequired_args> {
      public handleAnyRequired() {
        super("handleAnyRequired");
      }

      public handleAnyRequired_args getEmptyArgsInstance() {
        return new handleAnyRequired_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public handleAnyRequired_result getResult(I iface, handleAnyRequired_args args) throws org.apache.thrift.TException {
        handleAnyRequired_result result = new handleAnyRequired_result();
        iface.handleAnyRequired(args.dto);
        return result;
      }
    }

    public static class handleRequiredNullable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handleRequiredNullable_args> {
      public handleRequiredNullable() {
        super("handleRequiredNullable");
      }

      public handleRequiredNullable_args getEmptyArgsInstance() {
        return new handleRequiredNullable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public handleRequiredNullable_result getResult(I iface, handleRequiredNullable_args args) throws org.apache.thrift.TException {
        handleRequiredNullable_result result = new handleRequiredNullable_result();
        iface.handleRequiredNullable(args.dto);
        return result;
      }
    }

    public static class handleRequiredRequired<I extends Iface> extends org.apache.thrift.ProcessFunction<I, handleRequiredRequired_args> {
      public handleRequiredRequired() {
        super("handleRequiredRequired");
      }

      public handleRequiredRequired_args getEmptyArgsInstance() {
        return new handleRequiredRequired_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public handleRequiredRequired_result getResult(I iface, handleRequiredRequired_args args) throws org.apache.thrift.TException {
        handleRequiredRequired_result result = new handleRequiredRequired_result();
        iface.handleRequiredRequired(args.dto);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("handleAnyNullable", new handleAnyNullable());
      processMap.put("handleAnyRequired", new handleAnyRequired());
      processMap.put("handleRequiredNullable", new handleRequiredNullable());
      processMap.put("handleRequiredRequired", new handleRequiredRequired());
      return processMap;
    }

    public static class handleAnyNullable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handleAnyNullable_args, Void> {
      public handleAnyNullable() {
        super("handleAnyNullable");
      }

      public handleAnyNullable_args getEmptyArgsInstance() {
        return new handleAnyNullable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            handleAnyNullable_result result = new handleAnyNullable_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            handleAnyNullable_result result = new handleAnyNullable_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, handleAnyNullable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.handleAnyNullable(args.dto,resultHandler);
      }
    }

    public static class handleAnyRequired<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handleAnyRequired_args, Void> {
      public handleAnyRequired() {
        super("handleAnyRequired");
      }

      public handleAnyRequired_args getEmptyArgsInstance() {
        return new handleAnyRequired_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            handleAnyRequired_result result = new handleAnyRequired_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            handleAnyRequired_result result = new handleAnyRequired_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, handleAnyRequired_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.handleAnyRequired(args.dto,resultHandler);
      }
    }

    public static class handleRequiredNullable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handleRequiredNullable_args, Void> {
      public handleRequiredNullable() {
        super("handleRequiredNullable");
      }

      public handleRequiredNullable_args getEmptyArgsInstance() {
        return new handleRequiredNullable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            handleRequiredNullable_result result = new handleRequiredNullable_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            handleRequiredNullable_result result = new handleRequiredNullable_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, handleRequiredNullable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.handleRequiredNullable(args.dto,resultHandler);
      }
    }

    public static class handleRequiredRequired<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, handleRequiredRequired_args, Void> {
      public handleRequiredRequired() {
        super("handleRequiredRequired");
      }

      public handleRequiredRequired_args getEmptyArgsInstance() {
        return new handleRequiredRequired_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            handleRequiredRequired_result result = new handleRequiredRequired_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            handleRequiredRequired_result result = new handleRequiredRequired_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, handleRequiredRequired_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.handleRequiredRequired(args.dto,resultHandler);
      }
    }

  }

  public static class handleAnyNullable_args implements org.apache.thrift.TBase<handleAnyNullable_args, handleAnyNullable_args._Fields>, java.io.Serializable, Cloneable, Comparable<handleAnyNullable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handleAnyNullable_args");

    private static final org.apache.thrift.protocol.TField DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handleAnyNullable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handleAnyNullable_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable NullableDto dto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DTO((short)1, "dto");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DTO
            return DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DTO, new org.apache.thrift.meta_data.FieldMetaData("dto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NullableDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handleAnyNullable_args.class, metaDataMap);
    }

    public handleAnyNullable_args() {
    }

    public handleAnyNullable_args(
      NullableDto dto)
    {
      this();
      this.dto = dto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handleAnyNullable_args(handleAnyNullable_args other) {
      if (other.isSetDto()) {
        this.dto = new NullableDto(other.dto);
      }
    }

    public handleAnyNullable_args deepCopy() {
      return new handleAnyNullable_args(this);
    }

    @Override
    public void clear() {
      this.dto = null;
    }

    @org.apache.thrift.annotation.Nullable
    public NullableDto getDto() {
      return this.dto;
    }

    public handleAnyNullable_args setDto(@org.apache.thrift.annotation.Nullable NullableDto dto) {
      this.dto = dto;
      return this;
    }

    public void unsetDto() {
      this.dto = null;
    }

    /** Returns true if field dto is set (has been assigned a value) and false otherwise */
    public boolean isSetDto() {
      return this.dto != null;
    }

    public void setDtoIsSet(boolean value) {
      if (!value) {
        this.dto = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DTO:
        if (value == null) {
          unsetDto();
        } else {
          setDto((NullableDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DTO:
        return getDto();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DTO:
        return isSetDto();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handleAnyNullable_args)
        return this.equals((handleAnyNullable_args)that);
      return false;
    }

    public boolean equals(handleAnyNullable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dto = true && this.isSetDto();
      boolean that_present_dto = true && that.isSetDto();
      if (this_present_dto || that_present_dto) {
        if (!(this_present_dto && that_present_dto))
          return false;
        if (!this.dto.equals(that.dto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDto()) ? 131071 : 524287);
      if (isSetDto())
        hashCode = hashCode * 8191 + dto.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(handleAnyNullable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDto(), other.isSetDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dto, other.dto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handleAnyNullable_args(");
      boolean first = true;

      sb.append("dto:");
      if (this.dto == null) {
        sb.append("null");
      } else {
        sb.append(this.dto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dto != null) {
        dto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handleAnyNullable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleAnyNullable_argsStandardScheme getScheme() {
        return new handleAnyNullable_argsStandardScheme();
      }
    }

    private static class handleAnyNullable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handleAnyNullable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handleAnyNullable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dto = new NullableDto();
                struct.dto.read(iprot);
                struct.setDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handleAnyNullable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dto != null) {
          oprot.writeFieldBegin(DTO_FIELD_DESC);
          struct.dto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handleAnyNullable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleAnyNullable_argsTupleScheme getScheme() {
        return new handleAnyNullable_argsTupleScheme();
      }
    }

    private static class handleAnyNullable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handleAnyNullable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handleAnyNullable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDto()) {
          struct.dto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handleAnyNullable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dto = new NullableDto();
          struct.dto.read(iprot);
          struct.setDtoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class handleAnyNullable_result implements org.apache.thrift.TBase<handleAnyNullable_result, handleAnyNullable_result._Fields>, java.io.Serializable, Cloneable, Comparable<handleAnyNullable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handleAnyNullable_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handleAnyNullable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handleAnyNullable_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handleAnyNullable_result.class, metaDataMap);
    }

    public handleAnyNullable_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handleAnyNullable_result(handleAnyNullable_result other) {
    }

    public handleAnyNullable_result deepCopy() {
      return new handleAnyNullable_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handleAnyNullable_result)
        return this.equals((handleAnyNullable_result)that);
      return false;
    }

    public boolean equals(handleAnyNullable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(handleAnyNullable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handleAnyNullable_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handleAnyNullable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleAnyNullable_resultStandardScheme getScheme() {
        return new handleAnyNullable_resultStandardScheme();
      }
    }

    private static class handleAnyNullable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handleAnyNullable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handleAnyNullable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handleAnyNullable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handleAnyNullable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleAnyNullable_resultTupleScheme getScheme() {
        return new handleAnyNullable_resultTupleScheme();
      }
    }

    private static class handleAnyNullable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handleAnyNullable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handleAnyNullable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handleAnyNullable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class handleAnyRequired_args implements org.apache.thrift.TBase<handleAnyRequired_args, handleAnyRequired_args._Fields>, java.io.Serializable, Cloneable, Comparable<handleAnyRequired_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handleAnyRequired_args");

    private static final org.apache.thrift.protocol.TField DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handleAnyRequired_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handleAnyRequired_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RequiredDto dto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DTO((short)1, "dto");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DTO
            return DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DTO, new org.apache.thrift.meta_data.FieldMetaData("dto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequiredDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handleAnyRequired_args.class, metaDataMap);
    }

    public handleAnyRequired_args() {
    }

    public handleAnyRequired_args(
      RequiredDto dto)
    {
      this();
      this.dto = dto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handleAnyRequired_args(handleAnyRequired_args other) {
      if (other.isSetDto()) {
        this.dto = new RequiredDto(other.dto);
      }
    }

    public handleAnyRequired_args deepCopy() {
      return new handleAnyRequired_args(this);
    }

    @Override
    public void clear() {
      this.dto = null;
    }

    @org.apache.thrift.annotation.Nullable
    public RequiredDto getDto() {
      return this.dto;
    }

    public handleAnyRequired_args setDto(@org.apache.thrift.annotation.Nullable RequiredDto dto) {
      this.dto = dto;
      return this;
    }

    public void unsetDto() {
      this.dto = null;
    }

    /** Returns true if field dto is set (has been assigned a value) and false otherwise */
    public boolean isSetDto() {
      return this.dto != null;
    }

    public void setDtoIsSet(boolean value) {
      if (!value) {
        this.dto = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DTO:
        if (value == null) {
          unsetDto();
        } else {
          setDto((RequiredDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DTO:
        return getDto();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DTO:
        return isSetDto();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handleAnyRequired_args)
        return this.equals((handleAnyRequired_args)that);
      return false;
    }

    public boolean equals(handleAnyRequired_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dto = true && this.isSetDto();
      boolean that_present_dto = true && that.isSetDto();
      if (this_present_dto || that_present_dto) {
        if (!(this_present_dto && that_present_dto))
          return false;
        if (!this.dto.equals(that.dto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDto()) ? 131071 : 524287);
      if (isSetDto())
        hashCode = hashCode * 8191 + dto.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(handleAnyRequired_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDto(), other.isSetDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dto, other.dto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handleAnyRequired_args(");
      boolean first = true;

      sb.append("dto:");
      if (this.dto == null) {
        sb.append("null");
      } else {
        sb.append(this.dto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dto != null) {
        dto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handleAnyRequired_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleAnyRequired_argsStandardScheme getScheme() {
        return new handleAnyRequired_argsStandardScheme();
      }
    }

    private static class handleAnyRequired_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handleAnyRequired_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handleAnyRequired_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dto = new RequiredDto();
                struct.dto.read(iprot);
                struct.setDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handleAnyRequired_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dto != null) {
          oprot.writeFieldBegin(DTO_FIELD_DESC);
          struct.dto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handleAnyRequired_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleAnyRequired_argsTupleScheme getScheme() {
        return new handleAnyRequired_argsTupleScheme();
      }
    }

    private static class handleAnyRequired_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handleAnyRequired_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handleAnyRequired_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDto()) {
          struct.dto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handleAnyRequired_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dto = new RequiredDto();
          struct.dto.read(iprot);
          struct.setDtoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class handleAnyRequired_result implements org.apache.thrift.TBase<handleAnyRequired_result, handleAnyRequired_result._Fields>, java.io.Serializable, Cloneable, Comparable<handleAnyRequired_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handleAnyRequired_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handleAnyRequired_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handleAnyRequired_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handleAnyRequired_result.class, metaDataMap);
    }

    public handleAnyRequired_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handleAnyRequired_result(handleAnyRequired_result other) {
    }

    public handleAnyRequired_result deepCopy() {
      return new handleAnyRequired_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handleAnyRequired_result)
        return this.equals((handleAnyRequired_result)that);
      return false;
    }

    public boolean equals(handleAnyRequired_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(handleAnyRequired_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handleAnyRequired_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handleAnyRequired_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleAnyRequired_resultStandardScheme getScheme() {
        return new handleAnyRequired_resultStandardScheme();
      }
    }

    private static class handleAnyRequired_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handleAnyRequired_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handleAnyRequired_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handleAnyRequired_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handleAnyRequired_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleAnyRequired_resultTupleScheme getScheme() {
        return new handleAnyRequired_resultTupleScheme();
      }
    }

    private static class handleAnyRequired_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handleAnyRequired_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handleAnyRequired_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handleAnyRequired_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class handleRequiredNullable_args implements org.apache.thrift.TBase<handleRequiredNullable_args, handleRequiredNullable_args._Fields>, java.io.Serializable, Cloneable, Comparable<handleRequiredNullable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handleRequiredNullable_args");

    private static final org.apache.thrift.protocol.TField DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handleRequiredNullable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handleRequiredNullable_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable NullableDto dto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DTO((short)1, "dto");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DTO
            return DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DTO, new org.apache.thrift.meta_data.FieldMetaData("dto", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NullableDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handleRequiredNullable_args.class, metaDataMap);
    }

    public handleRequiredNullable_args() {
    }

    public handleRequiredNullable_args(
      NullableDto dto)
    {
      this();
      this.dto = dto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handleRequiredNullable_args(handleRequiredNullable_args other) {
      if (other.isSetDto()) {
        this.dto = new NullableDto(other.dto);
      }
    }

    public handleRequiredNullable_args deepCopy() {
      return new handleRequiredNullable_args(this);
    }

    @Override
    public void clear() {
      this.dto = null;
    }

    @org.apache.thrift.annotation.Nullable
    public NullableDto getDto() {
      return this.dto;
    }

    public handleRequiredNullable_args setDto(@org.apache.thrift.annotation.Nullable NullableDto dto) {
      this.dto = dto;
      return this;
    }

    public void unsetDto() {
      this.dto = null;
    }

    /** Returns true if field dto is set (has been assigned a value) and false otherwise */
    public boolean isSetDto() {
      return this.dto != null;
    }

    public void setDtoIsSet(boolean value) {
      if (!value) {
        this.dto = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DTO:
        if (value == null) {
          unsetDto();
        } else {
          setDto((NullableDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DTO:
        return getDto();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DTO:
        return isSetDto();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handleRequiredNullable_args)
        return this.equals((handleRequiredNullable_args)that);
      return false;
    }

    public boolean equals(handleRequiredNullable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dto = true && this.isSetDto();
      boolean that_present_dto = true && that.isSetDto();
      if (this_present_dto || that_present_dto) {
        if (!(this_present_dto && that_present_dto))
          return false;
        if (!this.dto.equals(that.dto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDto()) ? 131071 : 524287);
      if (isSetDto())
        hashCode = hashCode * 8191 + dto.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(handleRequiredNullable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDto(), other.isSetDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dto, other.dto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handleRequiredNullable_args(");
      boolean first = true;

      sb.append("dto:");
      if (this.dto == null) {
        sb.append("null");
      } else {
        sb.append(this.dto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (dto == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dto' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (dto != null) {
        dto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handleRequiredNullable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleRequiredNullable_argsStandardScheme getScheme() {
        return new handleRequiredNullable_argsStandardScheme();
      }
    }

    private static class handleRequiredNullable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handleRequiredNullable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handleRequiredNullable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dto = new NullableDto();
                struct.dto.read(iprot);
                struct.setDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handleRequiredNullable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dto != null) {
          oprot.writeFieldBegin(DTO_FIELD_DESC);
          struct.dto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handleRequiredNullable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleRequiredNullable_argsTupleScheme getScheme() {
        return new handleRequiredNullable_argsTupleScheme();
      }
    }

    private static class handleRequiredNullable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handleRequiredNullable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handleRequiredNullable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.dto.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handleRequiredNullable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.dto = new NullableDto();
        struct.dto.read(iprot);
        struct.setDtoIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class handleRequiredNullable_result implements org.apache.thrift.TBase<handleRequiredNullable_result, handleRequiredNullable_result._Fields>, java.io.Serializable, Cloneable, Comparable<handleRequiredNullable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handleRequiredNullable_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handleRequiredNullable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handleRequiredNullable_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handleRequiredNullable_result.class, metaDataMap);
    }

    public handleRequiredNullable_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handleRequiredNullable_result(handleRequiredNullable_result other) {
    }

    public handleRequiredNullable_result deepCopy() {
      return new handleRequiredNullable_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handleRequiredNullable_result)
        return this.equals((handleRequiredNullable_result)that);
      return false;
    }

    public boolean equals(handleRequiredNullable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(handleRequiredNullable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handleRequiredNullable_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handleRequiredNullable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleRequiredNullable_resultStandardScheme getScheme() {
        return new handleRequiredNullable_resultStandardScheme();
      }
    }

    private static class handleRequiredNullable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handleRequiredNullable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handleRequiredNullable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handleRequiredNullable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handleRequiredNullable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleRequiredNullable_resultTupleScheme getScheme() {
        return new handleRequiredNullable_resultTupleScheme();
      }
    }

    private static class handleRequiredNullable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handleRequiredNullable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handleRequiredNullable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handleRequiredNullable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class handleRequiredRequired_args implements org.apache.thrift.TBase<handleRequiredRequired_args, handleRequiredRequired_args._Fields>, java.io.Serializable, Cloneable, Comparable<handleRequiredRequired_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handleRequiredRequired_args");

    private static final org.apache.thrift.protocol.TField DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handleRequiredRequired_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handleRequiredRequired_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RequiredDto dto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DTO((short)1, "dto");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DTO
            return DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DTO, new org.apache.thrift.meta_data.FieldMetaData("dto", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequiredDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handleRequiredRequired_args.class, metaDataMap);
    }

    public handleRequiredRequired_args() {
    }

    public handleRequiredRequired_args(
      RequiredDto dto)
    {
      this();
      this.dto = dto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handleRequiredRequired_args(handleRequiredRequired_args other) {
      if (other.isSetDto()) {
        this.dto = new RequiredDto(other.dto);
      }
    }

    public handleRequiredRequired_args deepCopy() {
      return new handleRequiredRequired_args(this);
    }

    @Override
    public void clear() {
      this.dto = null;
    }

    @org.apache.thrift.annotation.Nullable
    public RequiredDto getDto() {
      return this.dto;
    }

    public handleRequiredRequired_args setDto(@org.apache.thrift.annotation.Nullable RequiredDto dto) {
      this.dto = dto;
      return this;
    }

    public void unsetDto() {
      this.dto = null;
    }

    /** Returns true if field dto is set (has been assigned a value) and false otherwise */
    public boolean isSetDto() {
      return this.dto != null;
    }

    public void setDtoIsSet(boolean value) {
      if (!value) {
        this.dto = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DTO:
        if (value == null) {
          unsetDto();
        } else {
          setDto((RequiredDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DTO:
        return getDto();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DTO:
        return isSetDto();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handleRequiredRequired_args)
        return this.equals((handleRequiredRequired_args)that);
      return false;
    }

    public boolean equals(handleRequiredRequired_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dto = true && this.isSetDto();
      boolean that_present_dto = true && that.isSetDto();
      if (this_present_dto || that_present_dto) {
        if (!(this_present_dto && that_present_dto))
          return false;
        if (!this.dto.equals(that.dto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDto()) ? 131071 : 524287);
      if (isSetDto())
        hashCode = hashCode * 8191 + dto.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(handleRequiredRequired_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDto(), other.isSetDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dto, other.dto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handleRequiredRequired_args(");
      boolean first = true;

      sb.append("dto:");
      if (this.dto == null) {
        sb.append("null");
      } else {
        sb.append(this.dto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (dto == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dto' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (dto != null) {
        dto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handleRequiredRequired_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleRequiredRequired_argsStandardScheme getScheme() {
        return new handleRequiredRequired_argsStandardScheme();
      }
    }

    private static class handleRequiredRequired_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<handleRequiredRequired_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handleRequiredRequired_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dto = new RequiredDto();
                struct.dto.read(iprot);
                struct.setDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handleRequiredRequired_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dto != null) {
          oprot.writeFieldBegin(DTO_FIELD_DESC);
          struct.dto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handleRequiredRequired_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleRequiredRequired_argsTupleScheme getScheme() {
        return new handleRequiredRequired_argsTupleScheme();
      }
    }

    private static class handleRequiredRequired_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<handleRequiredRequired_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handleRequiredRequired_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.dto.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handleRequiredRequired_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.dto = new RequiredDto();
        struct.dto.read(iprot);
        struct.setDtoIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class handleRequiredRequired_result implements org.apache.thrift.TBase<handleRequiredRequired_result, handleRequiredRequired_result._Fields>, java.io.Serializable, Cloneable, Comparable<handleRequiredRequired_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("handleRequiredRequired_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new handleRequiredRequired_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new handleRequiredRequired_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(handleRequiredRequired_result.class, metaDataMap);
    }

    public handleRequiredRequired_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public handleRequiredRequired_result(handleRequiredRequired_result other) {
    }

    public handleRequiredRequired_result deepCopy() {
      return new handleRequiredRequired_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof handleRequiredRequired_result)
        return this.equals((handleRequiredRequired_result)that);
      return false;
    }

    public boolean equals(handleRequiredRequired_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(handleRequiredRequired_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("handleRequiredRequired_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class handleRequiredRequired_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleRequiredRequired_resultStandardScheme getScheme() {
        return new handleRequiredRequired_resultStandardScheme();
      }
    }

    private static class handleRequiredRequired_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<handleRequiredRequired_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, handleRequiredRequired_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, handleRequiredRequired_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class handleRequiredRequired_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public handleRequiredRequired_resultTupleScheme getScheme() {
        return new handleRequiredRequired_resultTupleScheme();
      }
    }

    private static class handleRequiredRequired_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<handleRequiredRequired_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, handleRequiredRequired_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, handleRequiredRequired_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
