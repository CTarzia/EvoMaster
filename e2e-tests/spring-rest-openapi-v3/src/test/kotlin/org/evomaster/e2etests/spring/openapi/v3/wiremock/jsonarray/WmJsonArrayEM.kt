package org.foo


import  org.junit.jupiter.api.AfterAll
import  org.junit.jupiter.api.BeforeAll
import  org.junit.jupiter.api.BeforeEach
import  org.junit.jupiter.api.Test
import  org.junit.jupiter.api.Timeout
import  org.junit.jupiter.api.Assertions.*
import  org.evomaster.client.java.controller.api.EMTestUtils.*
import  org.evomaster.client.java.controller.SutHandler
import  io.restassured.RestAssured
import  io.restassured.RestAssured.given
import  io.restassured.response.ValidatableResponse
import  com.github.tomakehurst.wiremock.client.WireMock.*
import  com.github.tomakehurst.wiremock.WireMockServer
import  com.github.tomakehurst.wiremock.core.WireMockConfiguration
import  com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer
import  com.alibaba.dcm.DnsCacheManipulator
import  org.hamcrest.Matchers.*
import  io.restassured.config.JsonConfig
import  io.restassured.path.json.config.JsonPathConfig
import  io.restassured.config.RedirectConfig.redirectConfig
import  org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*
import  org.evomaster.client.java.controller.contentMatchers.StringMatcher.*
import  org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*
import  org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler
import  org.evomaster.client.java.controller.expect.ExpectationHandler


/**
 * This file was automatically generated by EvoMaster on 2024-04-25T10:26:50.757487+02:00\[Europe/Oslo\]
 *
 * The generated test suite contains 6 tests
 *
 * Covered targets: 67
 *
 * Used time: 0h 0m 25s
 *
 * Needed budget for current results: 16%
 *
 *
 */
internal class WmJsonArrayEM {


    companion object {
        private val controller : SutHandler = com.foo.rest.examples.spring.openapi.v3.wiremock.jsonarray.WmJsonArrayController()
        private lateinit var baseUrlOfSut: String
        private lateinit var wireMock__http__json_array__10877: WireMockServer
        /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
        * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
        */
        private val ems = false
        /**
        * sco - supported code oracle - checking that the response status code is among those supported according to the schema
        */
        private val sco = false


        @BeforeAll
        @JvmStatic
        fun initClass() {
            controller.setupForGeneratedTest()
            baseUrlOfSut = controller.startSut()
            controller.registerOrExecuteInitSqlCommandsIfNeeded()
            assertNotNull(baseUrlOfSut)
            RestAssured.enableLoggingOfRequestAndResponseIfValidationFails()
            RestAssured.useRelaxedHTTPSValidation()
            RestAssured.urlEncodingEnabled = false
            RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false))
            wireMock__http__json_array__10877 = WireMockServer(WireMockConfiguration()
                .bindAddress("127.0.0.4")
                .port(10877)
                .extensions(ResponseTemplateTransformer(false)))
            wireMock__http__json_array__10877.start()
        }


        @AfterAll
        @JvmStatic
        fun tearDown() {
            controller.stopSut()
            wireMock__http__json_array__10877.stop()
            DnsCacheManipulator.clearDnsCache()
        }
    }


    @BeforeEach
    fun initTest() {
        controller.resetStateOfSUT()
        wireMock__http__json_array__10877.resetAll()
        wireMock__http__json_array__10877.stubFor(
            any(anyUrl())
            .atPriority(100)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","text/plain")
                    .withStatus(404)
                    .withBody("Not Found")
                )
        )
        DnsCacheManipulator.clearDnsCache()
    }




    @Test @Timeout(60)
    fun test_0_with500()  {
        DnsCacheManipulator.setDnsCache("json.array", "127.0.0.4")
        val expectationHandler: ExpectationHandler = expectationHandler()
        assertNotNull(wireMock__http__json_array__10877)
        wireMock__http__json_array__10877.stubFor(
            get(urlEqualTo("/api/foo"))
            .atPriority(1)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","application/json")
                    .withStatus(201)
                    .withBody("\"_EM_8_XYZ_\"")
                )
        )


        val res_0: ValidatableResponse = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/wm/jsonarray?EMextraParam123=_EM_0_XYZ_")
                .then()
                .statusCode(500) // com/foo/rest/examples/spring/openapi/v3/wiremock/jsonarray/WmJsonArrayRest_24_getObject
                .assertThat()
                .contentType("text/html")

        expectationHandler.expect(ems)
            .that(sco, listOf<Int>(200).contains(res_0.extract().statusCode()))

        wireMock__http__json_array__10877.resetAll()
    }


    @Test @Timeout(60)
    fun test_1_with500()  {
        DnsCacheManipulator.setDnsCache("json.array", "127.0.0.4")
        val expectationHandler: ExpectationHandler = expectationHandler()
        assertNotNull(wireMock__http__json_array__10877)
        wireMock__http__json_array__10877.stubFor(
            get(urlEqualTo("/api/foo"))
            .atPriority(1)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","application/json")
                    .withStatus(201)
                    .withBody("[" +
                        "\"_EM_93_XYZ_\"" +
                        "]"
                    )
                )
        )


        val res_0: ValidatableResponse = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get("${baseUrlOfSut}/api/wm/jsonarray")
                .then()
                .statusCode(500) // com/foo/rest/examples/spring/openapi/v3/wiremock/jsonarray/WmJsonArrayRest_26_getObject
                .assertThat()
                .contentType("text/html")

        expectationHandler.expect(ems)
            .that(sco, listOf<Int>(200).contains(res_0.extract().statusCode()))

        wireMock__http__json_array__10877.resetAll()
    }


    @Test @Timeout(60)
    fun test_2_with500()  {
        DnsCacheManipulator.setDnsCache("json.array", "127.0.0.4")
        val expectationHandler: ExpectationHandler = expectationHandler()
        assertNotNull(wireMock__http__json_array__10877)
        wireMock__http__json_array__10877.stubFor(
            get(urlEqualTo("/api/foo"))
            .atPriority(1)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","application/json")
                    .withStatus(201)
                    .withBody("[" +
                        "{" +
                        "\"x\": -64564," +
                        "\"cycle\": {" +
                        "\"y\": 530" +
                        "}" +
                        "}," +
                        "{" +
                        "\"x\": -1073724890," +
                        "\"cycle\": {}" +
                        "}" +
                        "]"
                    )
                )
        )


        val res_0: ValidatableResponse = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/wm/jsonarray")
                .then()
                .statusCode(500) // com/foo/rest/examples/spring/openapi/v3/wiremock/jsonarray/WmJsonArrayRest_28_getObject
                .assertThat()
                .body(isEmptyOrNullString())

        expectationHandler.expect(ems)
            .that(sco, listOf<Int>(200).contains(res_0.extract().statusCode()))

        wireMock__http__json_array__10877.resetAll()
    }


    @Test @Timeout(60)
    fun test_3()  {
        val expectationHandler: ExpectationHandler = expectationHandler()

        val res_0: ValidatableResponse = given().accept("*/*")
                .get("${baseUrlOfSut}/v3/api-docs")
                .then()
                .statusCode(200)

        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, listOf<Int>().contains(res_0.extract().statusCode()))
    }


    @Test @Timeout(60)
    fun test_4()  {
        DnsCacheManipulator.setDnsCache("json.array", "127.0.0.4")
        assertNotNull(wireMock__http__json_array__10877)
        wireMock__http__json_array__10877.stubFor(
            get(urlEqualTo("/api/foo"))
            .atPriority(1)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","application/json")
                    .withStatus(201)
                    .withBody("[" +
                        "{" +
                        "\"x\": 972," +
                        "\"cycle\": {}" +
                        "}," +
                        "{" +
                        "\"x\": 736" +
                        "}" +
                        "]"
                    )
                )
        )


        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/wm/jsonarray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("OK X"))


        wireMock__http__json_array__10877.resetAll()
    }


    @Test @Timeout(60)
    fun test_5()  {
        DnsCacheManipulator.setDnsCache("json.array", "127.0.0.4")
        assertNotNull(wireMock__http__json_array__10877)
        wireMock__http__json_array__10877.stubFor(
            get(urlEqualTo("/api/foo"))
            .atPriority(1)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","application/json")
                    .withStatus(201)
                    .withBody("[" +
                        "{" +
                        "\"x\": 66508," +
                        "\"cycle\": {" +
                        "\"y\": 530" +
                        "}" +
                        "}," +
                        "{" +
                        "\"x\": 740," +
                        "\"cycle\": {}" +
                        "}" +
                        "]"
                    )
                )
        )


        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/wm/jsonarray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("OK X and Y"))


        wireMock__http__json_array__10877.resetAll()
    }


}
